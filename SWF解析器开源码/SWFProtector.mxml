<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   minWidth="955" minHeight="600" backgroundAlpha="0.9" backgroundColor="#000000"
			   creationComplete="onAppInit()" fontFamily="Arial" pageTitle="SwfProtector"
			   skinClass="spark.skins.spark.ApplicationSkin">
	<fx:Style source="SWFProtector.css"/>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.edgarcai.app.Config;
			import com.edgarcai.decompiler.*;
			import com.edgarcai.decompiler.abc.tokens.ConstantPoolToken;
			import com.edgarcai.decompiler.abc.tokens.NamespaceToken;
			import com.edgarcai.decompiler.abc.tokens.ScriptInfoToken;
			import com.edgarcai.decompiler.abc.tokens.TraitsInfoToken;
			import com.edgarcai.decompiler.abc.tokens.traits.TraitSlotToken;
			import com.edgarcai.decompiler.data.swf.records.ImportAssets2Record;
			import com.edgarcai.decompiler.data.swf9.tags.DoABCTag;
			import com.edgarcai.decompiler.events.*;
			import com.edgarcai.decompiler.utils.ABCToActionScript;
			import com.edgarcai.decompiler.utils.ReadableMultiname;
			import com.edgarcai.decompiler.utils.ReadableTrait;
			import com.edgarcai.utils.*;
			
			import flash.net.*;
			
			import mx.controls.VRule;
			
			import nochump.util.zip.ZipEntry;
			import nochump.util.zip.ZipOutput;
			
			private var _fileReference:FileReference = new FileReference();
			private var _auldByteArray:ByteArray;
			
			//程序初始化
			private var currentTagId:int=-1;
			private var lastSource:ByteArray;
			private var result:SWFReadResult;
			private var lastResult:SWFReadResult;
			private var tagDumpCache:Array;
			private var tagHexCache:Array;			
			private var customNamespaces:Object;
			private var parseStart:uint;
			//abc转actionscript
			private var translator:ABCToActionScript;
			private var _fzip:ZipOutput;
			private var classes:Array;
			private function onAppInit():void
			{
				this._fileReference.addEventListener(Event.SELECT, onSelectSWFHandler);
				this._fileReference.addEventListener(Event.COMPLETE, onFileCompleteSWFHandler);
				this.btnSelect.addEventListener(MouseEvent.CLICK,onSelectHandler);
				this.btnSave.addEventListener(MouseEvent.CLICK,saveZipFile);
			}
			
			private function onSelectSWFHandler(_arg1:Event):void{
				this._fileReference.load();
				this.addLog(("\n加载 "+this._fileReference.name + " 成功."));
			}
			
			//选择SWF文件
			private function onSelectHandler(e:MouseEvent):void
			{
				var _fileFilter:FileFilter = new FileFilter("SWF File", "*.swf");
				this._fileReference.browse([_fileFilter]);				
			}
			
			//文件加载完成
			private function onFileCompleteSWFHandler(e:Event):void
			{
				_fzip = new ZipOutput();
				classes = [];
				_auldByteArray =this._fileReference.data;
				if(_auldByteArray)
				{
					currentTagId = -1;
					parse(_auldByteArray);
				}
				else
				{
					this.addLog('请选择swf文件.');
				}
			}
			
			private function parse(bytes:ByteArray):void
			{
				this.addLog('>>>正在解析 '+bytes.length/1024/1024+'m 数据，请稍候...');
				
				var context:LoaderContext = new LoaderContext(false, ApplicationDomain.currentDomain);
				
				lastSource = bytes;
				
				//ByteArrayUtil.dumpHex(bytes);
				
				var swfBytes:SWFByteArray = new SWFByteArray(bytes);
				var swf:AsyncSWFReader = new AsyncSWFReader();
				
				swf.catchErrors = true;
				
				swf.addEventListener(AsyncSWFReaderEvent.TAG_READ, tagReadHandler);
				swf.addEventListener(AsyncSWFReaderEvent.READ_COMPLETE, readCompleteHandler);
				
				loadProgress.setProgress(0, 0);
				parseStart = getTimer();
				result = swf.read(swfBytes);
			}
			
			private function readCompleteHandler(ev:AsyncSWFReaderEvent):void
			{
				this.addLog('>>>>>>共解析了 '+result.tagMetadata.length+' Tags ('+ev.context.bytes.getLength()+' bytes) 花费 '+(getTimer() - parseStart)+'毫秒.');
				doneHandler();
			}
			
			private function doneHandler():void
			{
				loadProgress.setProgress(1, 1);
				
				if(result.errors.length > 0)
				{
					this.addLog(result.warnings.length+' errors:');
					this.addLog(result.errors.join('\n'));
				}
				else
				{
					this.addLog('>>>>>>无错误!');
				}
				
				if(result.warnings.length > 0)
				{
					this.addLog(result.warnings.length+' warnings:');
					this.addLog('\t'+result.warnings.join('\n\t'));
				}
				else
				{
					this.addLog('>>>>>>无警告!');
				}
				lastResult = result;
				tagDumpCache = [];
				tagHexCache = [];
				customNamespaces = {};
				
				var dp:Array = [];
				dp.push({id: -1, displayId: '', name: 'SWFHeader', size: lastResult.tagMetadata[0].start});
				
				for(var iterTag:uint = 0; iterTag < result.tagMetadata.length; iterTag++)
				{
					var metadata:Object = result.tagMetadata[iterTag];
					var label:String = metadata.name.substr(metadata.name.indexOf('::') + 2);
					dp.push({name: label, id: iterTag, displayId: iterTag, size: metadata.length});
					var abc:DoABCTag = result.swf.tags[iterTag] as DoABCTag;
					//doabctag
					if(abc)
					{
						translator = new ABCToActionScript(abc.abcFile);
						translator.showActionScript =false;
						translator.showByteCode = true;
						translator.showDebug = false;
						translator.showStack = false;
						translator.showBranchInfo = false;
						var cpool:ConstantPoolToken = abc.abcFile.cpool;
						//cpool info
						var ConstantPool:String = ObjectUtil.objectToString(cpool, 10, 3, 80, 100, true, '	');
						
						var classcount:uint=abc.abcFile.classCount;
						var ns:String;
						var name:String;
						
						var iter:uint = 0;
						for each(var script:ScriptInfoToken in abc.abcFile.scripts)
						{
							for(var iter2:uint = 0; iter2 < script.traitCount; iter2++)
							{
								var trait:TraitsInfoToken = script.traits[iter2];
								var r:ReadableTrait = new ReadableTrait();
								translator.getReadableTrait(trait, r);
								classes.push({id: iterTag, className: r.declaration.name, packageName: r.declaration.namespace, trait: trait});
								var start:uint = getTimer();
								var singletext:String = translator.scriptTraitToString(r);
								trace('Decompiling script took '+(getTimer() - start)+'ms\n');
								trace("as代码：\n"+singletext);
								//actionscript代码
								var _byte:ByteArray = new ByteArray();
								_byte.writeUTFBytes(singletext);
								var filename:String =[r.declaration.namespace, '.', r.declaration.name,'.as' ].join('');
								var entry:ZipEntry=new ZipEntry(filename);
								_fzip.putNextEntry(entry);
								_fzip.write(_byte);
								_fzip.closeEntry();
								iter++;
							}
						}
					}
				}
				if(_fzip.size>0)
				{
					_fzip.finish();
				}
				this.showSwfInfo();
			}
			
			private function showSwfInfo():void
			{
				this.toggbtnBarTitle.selectedIndex = 0;
				this.viewstackContents.selectedIndex = 0;
				this.txtAreaSWFInfo.setFocus();
				this.txtAreaSWFInfo.text = "";
				this.txtAreaSWFInfo.appendText("signature:"+result.swf.header.signature+"\n");
				this.txtAreaSWFInfo.appendText("flashplayer版本：:"+result.swf.header.fileVersion+"\n");
				this.txtAreaSWFInfo.appendText("帧频:"+result.swf.header.frameRate+"\n");
				this.txtAreaSWFInfo.appendText("总帧数:"+result.swf.header.frameCount+"\n");
			}
			
			private function tagReadHandler(ev:AsyncSWFReaderEvent):void
			{
				var current:uint = ev.context.bytes.getBytePosition();
				var max:uint = ev.context.bytes.getLength();
				parseProgress.setProgress(current, max);
			}
			
			private function getFileBinary(bytes:ByteArray):Array
			{
				var pos:int = bytes.position;
				bytes.position = 0;
				var resultArray:Array = new Array();
				while (bytes.bytesAvailable >= 8)
				{
					resultArray.push(getHex(bytes.readUnsignedByte()));
					resultArray.push(getHex(bytes.readUnsignedByte()));
					resultArray.push(getHex(bytes.readUnsignedByte()));
					resultArray.push(getHex(bytes.readUnsignedByte()));
					resultArray.push(getHex(bytes.readUnsignedByte()));
					resultArray.push(getHex(bytes.readUnsignedByte()));
					resultArray.push(getHex(bytes.readUnsignedByte()));
					resultArray.push(getHex(bytes.readUnsignedByte()));
				}
				if (bytes.bytesAvailable>1) 
				{
					resultArray.push(getHex(bytes.readUnsignedByte()));
				}
				if (bytes.bytesAvailable) {
					resultArray.push(getHex(bytes.readUnsignedByte()));
				}
				bytes.position = pos;
				return resultArray;
			}
			
			//获得二进制值为：
			private function getHex(n:uint):String {
				if(n <= 0xF){
					return "0"+ n.toString(2);
				}else{
					return n.toString(2);
				}
			}
			
			private function addLog(logInfo:String):void
			{
				this.logInfo.appendText(logInfo+"\n");				
			}
			
			private function saveZipFile(e:MouseEvent=null):void
			{
				var filecount:uint = _fzip.size;
				if(filecount!=0)
				{
					var file:FileReference = new FileReference();
					file.save(_fzip.byteArray,"as3src.zip");
				}
			}
			
		]]>
	</fx:Script>
	<mx:HDividedBox left="0" right="0" top="99" bottom="0">
		<mx:ViewStack id="viewstackContents" width="847" height="100%">
			<s:NavigatorContent id="swfinfo" width="100%" height="100%" label="SWF Info">
				<s:TextArea id="txtAreaSWFInfo" x="0" y="0" width="100%" height="100%"
							color="#00F645"/>
			</s:NavigatorContent>
			<s:NavigatorContent id="Obfuscation" width="100%" height="100%" label="Obfuscation">
				<s:TextArea id="txtAreaExcludeString" y="25" left="0" right="0" height="179"
							chromeColor="#000000" color="#00F645"/>
				<s:TextArea id="txtAreaIncludeString" y="237" left="0" right="0" height="179"
							color="#00F645"/>
				<s:Label x="10" y="5" text="Exclude strings"/>
				<s:Label x="10" y="222" text="inlude strings"/>
				<s:Button id="btnObfuscate" x="320" y="446" height="32" label="Obfuscate"/>
				<s:CheckBox id="chkboxDebug" x="412" y="451" label="debug mode"/>
			</s:NavigatorContent>
			<s:NavigatorContent id="Encyption" width="100%" height="100%" label="Encyption">
				<s:Button id="btnEncrypt" x="66" y="39" label="Encrypt"/>
				<s:Button id="btnDeencrypt" x="66" y="88" label="DeEncrypt"/>
			</s:NavigatorContent>
			<s:NavigatorContent id="taginfo" width="100%" height="100%" label="Tag Info">
				<s:Button x="217" y="174" label="TagInfo"/>
			</s:NavigatorContent>
		</mx:ViewStack>
		<s:TextArea id="logInfo" width="192" height="100%" color="#FFFFFF"/>
	</mx:HDividedBox>
	<mx:ToggleButtonBar id="toggbtnBarTitle" x="0" y="47" width="479" height="46"
						dataProvider="{viewstackContents}">
	</mx:ToggleButtonBar>
	<s:Button id="btnSave" x="871" y="12" width="68" height="27" label="Save..." color="#FFFFFF"/>
	<s:Button id="btnSelect" x="714" y="12" width="145" height="27" label="Select a SWF..."
			  color="#FFFFFF"/>
	<s:Label x="10" y="10" color="#FFB400" fontSize="30" fontWeight="bold" text="SWF"/>
	<s:Label x="80" y="10" color="#FFFFFF" fontSize="30" fontWeight="bold" text="Protector"/>
	<s:Label x="223" y="10" text="beta"/>
	<s:Label y="77" right="10" text="copyright @2011 厦门啊菜"/>
	<mx:ProgressBar id="loadProgress" bottom="0" width="100%" height="20" label="Loading SWF: %3%%"
					labelPlacement="center" maximum="1" minimum="0" mode="manual"/>
	<mx:ProgressBar id="parseProgress" x="-1" bottom="0" width="100%" height="20"
					label="Parsing SWF: %3%%" labelPlacement="center" maximum="1"
					minimum="0" mode="manual"/>
</s:Application>
